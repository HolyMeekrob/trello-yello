{
    "project": {},
    "files": {
        "lib\\obj\\action.js": {
            "name": "lib\\obj\\action.js",
            "modules": {},
            "classes": {
                "action": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\obj\\board.js": {
            "name": "lib\\obj\\board.js",
            "modules": {},
            "classes": {
                "board": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\obj\\card.js": {
            "name": "lib\\obj\\card.js",
            "modules": {},
            "classes": {
                "card": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\obj\\checklist.js": {
            "name": "lib\\obj\\checklist.js",
            "modules": {},
            "classes": {
                "checklist": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\obj\\label.js": {
            "name": "lib\\obj\\label.js",
            "modules": {},
            "classes": {
                "label": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\obj\\list.js": {
            "name": "lib\\obj\\list.js",
            "modules": {},
            "classes": {
                "list": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\obj\\member.js": {
            "name": "lib\\obj\\member.js",
            "modules": {},
            "classes": {
                "member": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\obj\\notification.js": {
            "name": "lib\\obj\\notification.js",
            "modules": {},
            "classes": {
                "notification": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\obj\\objUtil.js": {
            "name": "lib\\obj\\objUtil.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib\\obj\\organization.js": {
            "name": "lib\\obj\\organization.js",
            "modules": {},
            "classes": {
                "organization": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\obj\\token.js": {
            "name": "lib\\obj\\token.js",
            "modules": {},
            "classes": {
                "token": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\obj\\webhook.js": {
            "name": "lib\\obj\\webhook.js",
            "modules": {},
            "classes": {
                "webhook": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\trello.js": {
            "name": "lib\\trello.js",
            "modules": {
                "trello-yello": 1
            },
            "classes": {
                "trello": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\trelloObj.js": {
            "name": "lib\\trelloObj.js",
            "modules": {},
            "classes": {
                "trelloObj": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\util.js": {
            "name": "lib\\util.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "net\\networkService.js": {
            "name": "net\\networkService.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "trello-yello": {
            "name": "trello-yello",
            "submodules": {},
            "classes": {
                "action": 1,
                "board": 1,
                "card": 1,
                "checklist": 1,
                "label": 1,
                "list": 1,
                "member": 1,
                "notification": 1,
                "organization": 1,
                "token": 1,
                "webhook": 1,
                "trello": 1,
                "trelloObj": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "lib\\trelloObj.js",
            "line": 6,
            "description": "An object-oriented wrapper for the Trello API.",
            "itemtype": "main"
        }
    },
    "classes": {
        "action": {
            "name": "action",
            "shortname": "action",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "trello-yello",
            "file": "lib\\obj\\action.js",
            "line": 3,
            "description": "A class representing the Action Trello object.",
            "extends": "trelloObj",
            "is_constructor": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "params",
                    "description": "the constructor parameters object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "objMaps",
                            "description": "the container for all Trello object\nproperty mappings. Please refer to its documentation for details.",
                            "type": "Object"
                        },
                        {
                            "name": "config",
                            "description": "configuration object",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "key",
                                    "description": "the application key for accessing Trello",
                                    "type": "String"
                                },
                                {
                                    "name": "token",
                                    "description": "a valid Trello API token",
                                    "type": "String"
                                },
                                {
                                    "name": "version",
                                    "description": "the Trello API version Number",
                                    "type": "Number"
                                }
                            ]
                        },
                        {
                            "name": "id",
                            "description": "the ID of the Trello object",
                            "type": "String"
                        },
                        {
                            "name": "net",
                            "description": "the network service. Please refer to its\ndocumentation for specifics.",
                            "type": "Object"
                        },
                        {
                            "name": "objConstructor",
                            "description": "the factory method for creating new\nTrello objects. Using an injected factory method allows us to use higher\nlevel object classes while still maximizing reuse with this base object.",
                            "type": "Function"
                        },
                        {
                            "name": "initialVals",
                            "description": "the initial values of the Trello\nobject",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "board": {
            "name": "board",
            "shortname": "board",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "trello-yello",
            "file": "lib\\obj\\board.js",
            "line": 5,
            "description": "A class representing the Board Trello object.",
            "extends": "trelloObj",
            "is_constructor": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "params",
                    "description": "the constructor parameters object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "objMaps",
                            "description": "the container for all Trello object\nproperty mappings. Please refer to its documentation for details.",
                            "type": "Object"
                        },
                        {
                            "name": "config",
                            "description": "configuration object",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "key",
                                    "description": "the application key for accessing Trello",
                                    "type": "String"
                                },
                                {
                                    "name": "token",
                                    "description": "a valid Trello API token",
                                    "type": "String"
                                },
                                {
                                    "name": "version",
                                    "description": "the Trello API version Number",
                                    "type": "Number"
                                }
                            ]
                        },
                        {
                            "name": "id",
                            "description": "the ID of the Trello object",
                            "type": "String"
                        },
                        {
                            "name": "net",
                            "description": "the network service. Please refer to its\ndocumentation for specifics.",
                            "type": "Object"
                        },
                        {
                            "name": "objConstructor",
                            "description": "the factory method for creating new\nTrello objects. Using an injected factory method allows us to use higher\nlevel object classes while still maximizing reuse with this base object.",
                            "type": "Function"
                        },
                        {
                            "name": "initialVals",
                            "description": "the initial values of the Trello\nobject",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "card": {
            "name": "card",
            "shortname": "card",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "trello-yello",
            "file": "lib\\obj\\card.js",
            "line": 6,
            "description": "A class representing the Card Trello object.",
            "extends": "trelloObj",
            "is_constructor": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "params",
                    "description": "the constructor parameters object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "objMaps",
                            "description": "the container for all Trello object\nproperty mappings. Please refer to its documentation for details.",
                            "type": "Object"
                        },
                        {
                            "name": "config",
                            "description": "configuration object",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "key",
                                    "description": "the application key for accessing Trello",
                                    "type": "String"
                                },
                                {
                                    "name": "token",
                                    "description": "a valid Trello API token",
                                    "type": "String"
                                },
                                {
                                    "name": "version",
                                    "description": "the Trello API version Number",
                                    "type": "Number"
                                }
                            ]
                        },
                        {
                            "name": "id",
                            "description": "the ID of the Trello object",
                            "type": "String"
                        },
                        {
                            "name": "net",
                            "description": "the network service. Please refer to its\ndocumentation for specifics.",
                            "type": "Object"
                        },
                        {
                            "name": "objConstructor",
                            "description": "the factory method for creating new\nTrello objects. Using an injected factory method allows us to use higher\nlevel object classes while still maximizing reuse with this base object.",
                            "type": "Function"
                        },
                        {
                            "name": "initialVals",
                            "description": "the initial values of the Trello\nobject",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "checklist": {
            "name": "checklist",
            "shortname": "checklist",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "trello-yello",
            "file": "lib\\obj\\checklist.js",
            "line": 4,
            "description": "A class representing the Checklist Trello object.",
            "extends": "trelloObj",
            "is_constructor": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "params",
                    "description": "the constructor parameters object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "objMaps",
                            "description": "the container for all Trello object\nproperty mappings. Please refer to its documentation for details.",
                            "type": "Object"
                        },
                        {
                            "name": "config",
                            "description": "configuration object",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "key",
                                    "description": "the application key for accessing Trello",
                                    "type": "String"
                                },
                                {
                                    "name": "token",
                                    "description": "a valid Trello API token",
                                    "type": "String"
                                },
                                {
                                    "name": "version",
                                    "description": "the Trello API version Number",
                                    "type": "Number"
                                }
                            ]
                        },
                        {
                            "name": "id",
                            "description": "the ID of the Trello object",
                            "type": "String"
                        },
                        {
                            "name": "net",
                            "description": "the network service. Please refer to its\ndocumentation for specifics.",
                            "type": "Object"
                        },
                        {
                            "name": "objConstructor",
                            "description": "the factory method for creating new\nTrello objects. Using an injected factory method allows us to use higher\nlevel object classes while still maximizing reuse with this base object.",
                            "type": "Function"
                        },
                        {
                            "name": "initialVals",
                            "description": "the initial values of the Trello\nobject",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "label": {
            "name": "label",
            "shortname": "label",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "trello-yello",
            "file": "lib\\obj\\label.js",
            "line": 3,
            "description": "A class representing the Label Trello object.",
            "extends": "trelloObj",
            "is_constructor": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "params",
                    "description": "the constructor parameters object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "objMaps",
                            "description": "the container for all Trello object\nproperty mappings. Please refer to its documentation for details.",
                            "type": "Object"
                        },
                        {
                            "name": "config",
                            "description": "configuration object",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "key",
                                    "description": "the application key for accessing Trello",
                                    "type": "String"
                                },
                                {
                                    "name": "token",
                                    "description": "a valid Trello API token",
                                    "type": "String"
                                },
                                {
                                    "name": "version",
                                    "description": "the Trello API version Number",
                                    "type": "Number"
                                }
                            ]
                        },
                        {
                            "name": "id",
                            "description": "the ID of the Trello object",
                            "type": "String"
                        },
                        {
                            "name": "net",
                            "description": "the network service. Please refer to its\ndocumentation for specifics.",
                            "type": "Object"
                        },
                        {
                            "name": "objConstructor",
                            "description": "the factory method for creating new\nTrello objects. Using an injected factory method allows us to use higher\nlevel object classes while still maximizing reuse with this base object.",
                            "type": "Function"
                        },
                        {
                            "name": "initialVals",
                            "description": "the initial values of the Trello\nobject",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "list": {
            "name": "list",
            "shortname": "list",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "trello-yello",
            "file": "lib\\obj\\list.js",
            "line": 3,
            "description": "A class representing the List Trello object.",
            "extends": "trelloObj",
            "is_constructor": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "params",
                    "description": "the constructor parameters object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "objMaps",
                            "description": "the container for all Trello object\nproperty mappings. Please refer to its documentation for details.",
                            "type": "Object"
                        },
                        {
                            "name": "config",
                            "description": "configuration object",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "key",
                                    "description": "the application key for accessing Trello",
                                    "type": "String"
                                },
                                {
                                    "name": "token",
                                    "description": "a valid Trello API token",
                                    "type": "String"
                                },
                                {
                                    "name": "version",
                                    "description": "the Trello API version Number",
                                    "type": "Number"
                                }
                            ]
                        },
                        {
                            "name": "id",
                            "description": "the ID of the Trello object",
                            "type": "String"
                        },
                        {
                            "name": "net",
                            "description": "the network service. Please refer to its\ndocumentation for specifics.",
                            "type": "Object"
                        },
                        {
                            "name": "objConstructor",
                            "description": "the factory method for creating new\nTrello objects. Using an injected factory method allows us to use higher\nlevel object classes while still maximizing reuse with this base object.",
                            "type": "Function"
                        },
                        {
                            "name": "initialVals",
                            "description": "the initial values of the Trello\nobject",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "member": {
            "name": "member",
            "shortname": "member",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "trello-yello",
            "file": "lib\\obj\\member.js",
            "line": 4,
            "description": "A class representing the Member Trello object.",
            "extends": "trelloObj",
            "is_constructor": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "params",
                    "description": "the constructor parameters object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "objMaps",
                            "description": "the container for all Trello object\nproperty mappings. Please refer to its documentation for details.",
                            "type": "Object"
                        },
                        {
                            "name": "config",
                            "description": "configuration object",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "key",
                                    "description": "the application key for accessing Trello",
                                    "type": "String"
                                },
                                {
                                    "name": "token",
                                    "description": "a valid Trello API token",
                                    "type": "String"
                                },
                                {
                                    "name": "version",
                                    "description": "the Trello API version Number",
                                    "type": "Number"
                                }
                            ]
                        },
                        {
                            "name": "id",
                            "description": "the ID of the Trello object",
                            "type": "String"
                        },
                        {
                            "name": "net",
                            "description": "the network service. Please refer to its\ndocumentation for specifics.",
                            "type": "Object"
                        },
                        {
                            "name": "objConstructor",
                            "description": "the factory method for creating new\nTrello objects. Using an injected factory method allows us to use higher\nlevel object classes while still maximizing reuse with this base object.",
                            "type": "Function"
                        },
                        {
                            "name": "initialVals",
                            "description": "the initial values of the Trello\nobject",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "notification": {
            "name": "notification",
            "shortname": "notification",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "trello-yello",
            "file": "lib\\obj\\notification.js",
            "line": 3,
            "description": "A class representing the Notification Trello object.",
            "extends": "trelloObj",
            "is_constructor": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "params",
                    "description": "the constructor parameters object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "objMaps",
                            "description": "the container for all Trello object\nproperty mappings. Please refer to its documentation for details.",
                            "type": "Object"
                        },
                        {
                            "name": "config",
                            "description": "configuration object",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "key",
                                    "description": "the application key for accessing Trello",
                                    "type": "String"
                                },
                                {
                                    "name": "token",
                                    "description": "a valid Trello API token",
                                    "type": "String"
                                },
                                {
                                    "name": "version",
                                    "description": "the Trello API version Number",
                                    "type": "Number"
                                }
                            ]
                        },
                        {
                            "name": "id",
                            "description": "the ID of the Trello object",
                            "type": "String"
                        },
                        {
                            "name": "net",
                            "description": "the network service. Please refer to its\ndocumentation for specifics.",
                            "type": "Object"
                        },
                        {
                            "name": "objConstructor",
                            "description": "the factory method for creating new\nTrello objects. Using an injected factory method allows us to use higher\nlevel object classes while still maximizing reuse with this base object.",
                            "type": "Function"
                        },
                        {
                            "name": "initialVals",
                            "description": "the initial values of the Trello\nobject",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "organization": {
            "name": "organization",
            "shortname": "organization",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "trello-yello",
            "file": "lib\\obj\\organization.js",
            "line": 3,
            "description": "A class representing the Organization Trello object.",
            "extends": "trelloObj",
            "is_constructor": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "params",
                    "description": "the constructor parameters object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "objMaps",
                            "description": "the container for all Trello object\nproperty mappings. Please refer to its documentation for details.",
                            "type": "Object"
                        },
                        {
                            "name": "config",
                            "description": "configuration object",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "key",
                                    "description": "the application key for accessing Trello",
                                    "type": "String"
                                },
                                {
                                    "name": "token",
                                    "description": "a valid Trello API token",
                                    "type": "String"
                                },
                                {
                                    "name": "version",
                                    "description": "the Trello API version Number",
                                    "type": "Number"
                                }
                            ]
                        },
                        {
                            "name": "id",
                            "description": "the ID of the Trello object",
                            "type": "String"
                        },
                        {
                            "name": "net",
                            "description": "the network service. Please refer to its\ndocumentation for specifics.",
                            "type": "Object"
                        },
                        {
                            "name": "objConstructor",
                            "description": "the factory method for creating new\nTrello objects. Using an injected factory method allows us to use higher\nlevel object classes while still maximizing reuse with this base object.",
                            "type": "Function"
                        },
                        {
                            "name": "initialVals",
                            "description": "the initial values of the Trello\nobject",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "token": {
            "name": "token",
            "shortname": "token",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "trello-yello",
            "file": "lib\\obj\\token.js",
            "line": 5,
            "description": "A class representing the Token Trello object.",
            "extends": "trelloObj",
            "is_constructor": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "params",
                    "description": "the constructor parameters object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "objMaps",
                            "description": "the container for all Trello object\nproperty mappings. Please refer to its documentation for details.",
                            "type": "Object"
                        },
                        {
                            "name": "config",
                            "description": "configuration object",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "key",
                                    "description": "the application key for accessing Trello",
                                    "type": "String"
                                },
                                {
                                    "name": "token",
                                    "description": "a valid Trello API token",
                                    "type": "String"
                                },
                                {
                                    "name": "version",
                                    "description": "the Trello API version Number",
                                    "type": "Number"
                                }
                            ]
                        },
                        {
                            "name": "id",
                            "description": "the ID of the Trello object",
                            "type": "String"
                        },
                        {
                            "name": "net",
                            "description": "the network service. Please refer to its\ndocumentation for specifics.",
                            "type": "Object"
                        },
                        {
                            "name": "objConstructor",
                            "description": "the factory method for creating new\nTrello objects. Using an injected factory method allows us to use higher\nlevel object classes while still maximizing reuse with this base object.",
                            "type": "Function"
                        },
                        {
                            "name": "initialVals",
                            "description": "the initial values of the Trello\nobject",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "webhook": {
            "name": "webhook",
            "shortname": "webhook",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "trello-yello",
            "file": "lib\\obj\\webhook.js",
            "line": 3,
            "description": "A class representing the webhook Trello object.",
            "extends": "trelloObj",
            "is_constructor": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "params",
                    "description": "the constructor parameters object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "objMaps",
                            "description": "the container for all Trello object\nproperty mappings. Please refer to its documentation for details.",
                            "type": "Object"
                        },
                        {
                            "name": "config",
                            "description": "configuration object",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "key",
                                    "description": "the application key for accessing Trello",
                                    "type": "String"
                                },
                                {
                                    "name": "token",
                                    "description": "a valid Trello API token",
                                    "type": "String"
                                },
                                {
                                    "name": "version",
                                    "description": "the Trello API version Number",
                                    "type": "Number"
                                }
                            ]
                        },
                        {
                            "name": "id",
                            "description": "the ID of the Trello object",
                            "type": "String"
                        },
                        {
                            "name": "net",
                            "description": "the network service. Please refer to its\ndocumentation for specifics.",
                            "type": "Object"
                        },
                        {
                            "name": "objConstructor",
                            "description": "the factory method for creating new\nTrello objects. Using an injected factory method allows us to use higher\nlevel object classes while still maximizing reuse with this base object.",
                            "type": "Function"
                        },
                        {
                            "name": "initialVals",
                            "description": "the initial values of the Trello\nobject",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "trello": {
            "name": "trello",
            "shortname": "trello",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "trello-yello",
            "namespace": "",
            "file": "lib\\trello.js",
            "line": 15,
            "description": "Trello Yello's entry point for accessing the Trello API. It serves as both an\nobject factory for Trello objects as well as a platform for performing\noperations that aren't associated with specific Trello objects, such as\nqueries against the Trello search engine.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "params",
                    "description": "the constructor parameters object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "key",
                            "description": "the application key for accessing Trello",
                            "type": "String"
                        },
                        {
                            "name": "token",
                            "description": "a valid Trello API token",
                            "type": "String"
                        }
                    ]
                }
            ]
        },
        "trelloObj": {
            "name": "trelloObj",
            "shortname": "trelloObj",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "trello-yello",
            "namespace": "",
            "file": "lib\\trelloObj.js",
            "line": 6,
            "description": "Base object for Trello objects. All Trello objects inherit from this.\nDo not use this class directly.",
            "is_constructor": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "params",
                    "description": "the constructor parameters object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "maps",
                            "description": "the container for all Trello object\nproperty mappings. Please refer to its documentation for details.",
                            "type": "Object"
                        },
                        {
                            "name": "objType",
                            "description": "the type of Trello object. Please refer to\nother documentation for the list of allowed types.",
                            "type": "String"
                        },
                        {
                            "name": "config",
                            "description": "configuration object",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "key",
                                    "description": "the application key for accessing Trello",
                                    "type": "String"
                                },
                                {
                                    "name": "token",
                                    "description": "a valid Trello API token",
                                    "type": "String"
                                },
                                {
                                    "name": "version",
                                    "description": "the Trello API version Number",
                                    "type": "Number"
                                }
                            ]
                        },
                        {
                            "name": "id",
                            "description": "the ID of the Trello object",
                            "type": "String"
                        },
                        {
                            "name": "net",
                            "description": "the network service. Please refer to its\ndocumentation for specifics.",
                            "type": "Object"
                        },
                        {
                            "name": "objConstructor",
                            "description": "the factory method for creating new\nTrello objects. Using an injected factory method allows us to use higher\nlevel object classes while still maximizing reuse with this base object.",
                            "type": "Function"
                        },
                        {
                            "name": "initialVals",
                            "description": "the initial values of the Trello\nobject",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ]
        }
    },
    "classitems": [
        {
            "file": "lib\\obj\\action.js",
            "line": 38,
            "itemtype": "method",
            "name": "getBoard",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the action's board. This is a\nboard object.",
                "type": "Object"
            },
            "class": "action"
        },
        {
            "file": "lib\\obj\\action.js",
            "line": 53,
            "itemtype": "method",
            "name": "getCard",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the action's card. This is a\ncard object.",
                "type": "Object"
            },
            "class": "action"
        },
        {
            "file": "lib\\obj\\action.js",
            "line": 69,
            "itemtype": "method",
            "name": "getData",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to action data",
                "type": "Object"
            },
            "class": "action"
        },
        {
            "file": "lib\\obj\\action.js",
            "line": 84,
            "itemtype": "method",
            "name": "getDate",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to action's date",
                "type": "Object"
            },
            "class": "action"
        },
        {
            "file": "lib\\obj\\action.js",
            "line": 99,
            "itemtype": "method",
            "name": "getDisplay",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to action's display values",
                "type": "Object"
            },
            "class": "action"
        },
        {
            "file": "lib\\obj\\action.js",
            "line": 114,
            "itemtype": "method",
            "name": "getEntities",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to action's entities",
                "type": "Object"
            },
            "class": "action"
        },
        {
            "file": "lib\\obj\\action.js",
            "line": 129,
            "itemtype": "method",
            "name": "getList",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the action's list. This is a\nlist object.",
                "type": "Object"
            },
            "class": "action"
        },
        {
            "file": "lib\\obj\\action.js",
            "line": 145,
            "itemtype": "method",
            "name": "getMember",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to action's member. This is a\nmember object.",
                "type": "Object"
            },
            "class": "action"
        },
        {
            "file": "lib\\obj\\action.js",
            "line": 161,
            "itemtype": "method",
            "name": "getCreator",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the member who created the\naction. This is a member object.",
                "type": "Object"
            },
            "class": "action"
        },
        {
            "file": "lib\\obj\\action.js",
            "line": 177,
            "itemtype": "method",
            "name": "getOrganization",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to action's organization. This is\nan organization object.",
                "type": "Object"
            },
            "class": "action"
        },
        {
            "file": "lib\\obj\\action.js",
            "line": 193,
            "itemtype": "method",
            "name": "getType",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to action's type",
                "type": "Object"
            },
            "class": "action"
        },
        {
            "file": "lib\\obj\\action.js",
            "line": 212,
            "itemtype": "method",
            "name": "setText",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "text",
                            "description": "the action text",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "action"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 40,
            "itemtype": "method",
            "name": "getActions",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the board's actions. This is an\narray of action objects.",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 56,
            "itemtype": "method",
            "name": "getAmISubscribed",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to true if the user is subscribed\nto the board",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 72,
            "itemtype": "method",
            "name": "getBoardStars",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the board's stars",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 87,
            "itemtype": "method",
            "name": "getCards",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the board's cards. This is\nan array of card objects.",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 103,
            "itemtype": "method",
            "name": "getChecklists",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to all of the board's checklists.\nThis is an array of checklist objects.",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 119,
            "itemtype": "method",
            "name": "isClosed",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to true if the board is closed",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 134,
            "itemtype": "method",
            "name": "getLastActivityDate",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the timestamp of the board's\nlast activity",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 150,
            "itemtype": "method",
            "name": "getLastViewedDate",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the timestamp of the board's\nlast viewing",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 166,
            "itemtype": "method",
            "name": "getDescription",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the board's descrsiption",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 181,
            "itemtype": "method",
            "name": "getDescriptionData",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the board's description data",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 196,
            "itemtype": "method",
            "name": "getInvitations",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a list of the board's current\ninvitations",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 212,
            "itemtype": "method",
            "name": "getInvited",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to true if the current user has\nan invitation to the board",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 229,
            "itemtype": "method",
            "name": "getLabels",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the board's labels. This is\nan array of label objects.",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 245,
            "itemtype": "method",
            "name": "getLabelNames",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to board's label names",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 260,
            "itemtype": "method",
            "name": "getLists",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the board's lists. This is an\narray of list objects.",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 276,
            "itemtype": "method",
            "name": "getMembers",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the board's members. This is\nan array of member objects.",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 292,
            "itemtype": "method",
            "name": "getInvitedMembers",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the members that are invited\nto the board. This is an array of member objects.",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 308,
            "itemtype": "method",
            "name": "getMemberships",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to board's memberships",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 323,
            "itemtype": "method",
            "name": "getMyPreferences",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the user's preferences for the\nboard",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 339,
            "itemtype": "method",
            "name": "getName",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to board's name",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 354,
            "itemtype": "method",
            "name": "getOrganization",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to board's organization. This is\nan organization object.",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 370,
            "itemtype": "method",
            "name": "getPinned",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to true if the board has been\npinned",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 386,
            "itemtype": "method",
            "name": "getPreferences",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the board's settings",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 401,
            "itemtype": "method",
            "name": "getPowerUps",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the board's power ups",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 416,
            "itemtype": "method",
            "name": "getShortLink",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the shortform version of the\nboard's link",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 432,
            "itemtype": "method",
            "name": "getShortUrl",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the shortform version of the\nboard's url",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 448,
            "itemtype": "method",
            "name": "isStarred",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to true if the board is starred\nby the current user",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 464,
            "itemtype": "method",
            "name": "getUrl",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the longform version of the\nboard's url",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 484,
            "description": "Closes the board.",
            "itemtype": "method",
            "name": "close",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 503,
            "description": "Reopens the board.",
            "itemtype": "method",
            "name": "reopen",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 522,
            "itemtype": "method",
            "name": "setDescription",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "description",
                            "description": "the new description",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 542,
            "itemtype": "method",
            "name": "setOrganization",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "organizationId",
                            "description": "the id of the organization",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 562,
            "description": "Sets the name for the label of the given color.",
            "itemtype": "method",
            "name": "setLabelName",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "color",
                            "description": "the color for the name change",
                            "type": "String"
                        },
                        {
                            "name": "name",
                            "description": "the new name for the color",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 586,
            "description": "Sets the member type for a member with the given information. If they are\nnot already a member on the board, they are added as one.",
            "itemtype": "method",
            "name": "addMemberAndSetType",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "email",
                            "description": "the email address of the member",
                            "type": "String"
                        },
                        {
                            "name": "fullName",
                            "description": "the full name of the member",
                            "type": "String"
                        },
                        {
                            "name": "memberType",
                            "description": "the member type to set for the\nuser. Valid values are 'admin', 'normal', and 'observer'.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'normal'"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 612,
            "itemtype": "method",
            "name": "setMemberType",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "memberId",
                            "description": "the member's id",
                            "type": "String"
                        },
                        {
                            "name": "memberType",
                            "description": "the member type to set for the user.\nValid values are 'admin', 'normal', and 'observer'.",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 634,
            "itemtype": "method",
            "name": "setMembershipType",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "membershipId",
                            "description": "the membershipId",
                            "type": "String"
                        },
                        {
                            "name": "membershipType",
                            "description": "the membership type to set for the\nuser. Valid values are 'admin', 'normal', and 'observer'.",
                            "type": "String"
                        },
                        {
                            "name": "memberFields",
                            "description": "a\ncomma-separated list of member fields for the membership. Can be 'all' or\nany collection of the following: 'avatarHash', 'bio', 'bioData',\n'confirmed', 'fullName', 'idPremOrgsAdmin', 'initials', 'memberType',\n'products', 'status', 'url', 'username'.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'fullName,username'"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 666,
            "itemtype": "method",
            "name": "setEmailPosition",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "emailPosition",
                            "description": "The position on a list that emailed\ncards will be set to. Valid values are 'top' and 'bottom'.",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 687,
            "itemtype": "method",
            "name": "setEmailList",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "emailListId",
                            "description": "the list Id that emailed cards will\nappear on",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 708,
            "description": "Shows the list guide.",
            "itemtype": "method",
            "name": "showListGuide",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 728,
            "description": "Hides the list guide.",
            "itemtype": "method",
            "name": "hideListGuide",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 747,
            "description": "Shows the sidebar.",
            "itemtype": "method",
            "name": "showSidebar",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 766,
            "description": "Hides the sidebar.",
            "itemtype": "method",
            "name": "hideSidebar",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 785,
            "description": "Shows the activity section of the sidebar.",
            "itemtype": "method",
            "name": "showSidebarActivity",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 804,
            "description": "Hide the activity section of the sidebar.",
            "itemtype": "method",
            "name": "hideSidebarActivity",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 823,
            "description": "Shows the board actions section of the sidebar.",
            "itemtype": "method",
            "name": "showSidebarActions",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 842,
            "description": "Hides the board actions section of the sidebar.",
            "itemtype": "method",
            "name": "hideSidebarActions",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 861,
            "description": "Shows the members section of the sidebar.",
            "itemtype": "method",
            "name": "showSidebarMembers",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 880,
            "description": "Hides the members section of the sidebar.",
            "itemtype": "method",
            "name": "hideSidebarMembers",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 899,
            "itemtype": "method",
            "name": "setName",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "name",
                            "description": "the new name for the board",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 919,
            "itemtype": "method",
            "name": "setBackground",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "background",
                            "description": "the new background. This must be a\nstandard background name or the id of a custom background.",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 940,
            "description": "Enables the board's calendar feed feature.",
            "itemtype": "method",
            "name": "enableCalendarFeed",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 959,
            "description": "Disables the board's calendar feed feature.",
            "itemtype": "method",
            "name": "disableCalendarFeed",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 978,
            "itemtype": "method",
            "name": "setCardAging",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "cardAgingType",
                            "description": "the card aging type. Valid values\nare 'regular' and 'pirate'.",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 999,
            "description": "Enables card covers for the board.",
            "itemtype": "method",
            "name": "enableCardCovers",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 1018,
            "description": "Disables card covers for the board.",
            "itemtype": "method",
            "name": "disableCardCovers",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 1037,
            "itemtype": "method",
            "name": "setCommentsPermissions",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "permissionsLevel",
                            "description": "the permissions level for the board's\ncomments. Allowed values are disabled, members, observers, org, public.",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 1058,
            "itemtype": "method",
            "name": "setInvitationsPermissions",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "memberLevel",
                            "description": "the level of member that can send\ninvitations to the board. Allowed values are admins and members.",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 1079,
            "itemtype": "method",
            "name": "setVisibility",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "visibility",
                            "description": "the group that a member must belong\nto in order to be invited to the board. Valid values are 'org', 'private',\nand 'public'.",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 1101,
            "description": "Allows a member to join without invitation.",
            "itemtype": "method",
            "name": "enableSelfJoin",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 1120,
            "description": "Disallows members to join without invitation.",
            "itemtype": "method",
            "name": "disableSelfJoin",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 1139,
            "itemtype": "method",
            "name": "setVotingPermissions",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "permissionLevel",
                            "description": "the level of member that is allowed\nto vote on cards. Valid values are 'disabled', 'members', 'observers',\n'org', and 'public'.",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 1161,
            "description": "Subscribes the user to the board.",
            "itemtype": "method",
            "name": "subscribe",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 1180,
            "description": "Unsubscribes the user from the board.",
            "itemtype": "method",
            "name": "unsubscribe",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 1199,
            "description": "Generates a calendar key.",
            "itemtype": "method",
            "name": "generateCalendarKey",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the new calendar key",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 1220,
            "description": "Generates an email key.",
            "itemtype": "method",
            "name": "generateEmailKey",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the new email key",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 1241,
            "description": "Adds a new label to the board with the given name.",
            "itemtype": "method",
            "name": "addLabel",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "name",
                            "description": "the name of the label",
                            "type": "String"
                        },
                        {
                            "name": "color",
                            "description": "the color of the label",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a label object for the\nnew label",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 1268,
            "itemtype": "method",
            "name": "addList",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "name",
                            "description": "the name of the new list",
                            "type": "String"
                        },
                        {
                            "name": "position",
                            "description": "the position of the list. Valid\nvalue are 'top', 'bottom', or a positive number.",
                            "type": "String | Number",
                            "optional": true,
                            "optdefault": "'top'"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a list object for the new list",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 1293,
            "description": "Mark the board as viewed by the user.",
            "itemtype": "method",
            "name": "markAsViewed",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 1311,
            "itemtype": "method",
            "name": "addPowerUp",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "powerUp",
                            "description": "the powerUp to add to the board. Valid\nvalues are 'calendar', 'cardAging', 'recap', and 'voting'.",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 1336,
            "itemtype": "method",
            "name": "removeMember",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "memberId",
                            "description": "member to remove from the board",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\board.js",
            "line": 1354,
            "itemtype": "method",
            "name": "removePowerUp",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "powerUp",
                            "description": "the powerUp to remove from the board. Valid\nvalues are 'calendar', 'cardAging', 'recap', and 'voting'.",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "board"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 41,
            "itemtype": "method",
            "name": "getAmISubscribed",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to true if the user is subscribed\nto the card",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 57,
            "itemtype": "method",
            "name": "getActions",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the card's actions. This is an\narray of action objects.",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 73,
            "itemtype": "method",
            "name": "getAddCommentEmail",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the email address which, when\nnew emails are received, will add a comment to the card",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 89,
            "itemtype": "method",
            "name": "getAttachmentCoverId",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the id of the attachment used\nas the card's cover",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 105,
            "itemtype": "method",
            "name": "getAttachments",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the card's attachments",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 120,
            "itemtype": "method",
            "name": "getBadges",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the card's badges",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 135,
            "itemtype": "method",
            "name": "getBoard",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a board object representing\nthe card's board",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 151,
            "itemtype": "method",
            "name": "getCheckItemStates",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the state of the card's\nchecklist items",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 167,
            "itemtype": "method",
            "name": "getChecklists",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the card's checklists. This\nis an array of checklist objects.",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 183,
            "itemtype": "method",
            "name": "getDescription",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the card's description",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 199,
            "itemtype": "method",
            "name": "getDescriptionData",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the card's description data",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 215,
            "itemtype": "method",
            "name": "getDueDate",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the card's dueDate,\nor null if it doesn't have one",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 231,
            "itemtype": "method",
            "name": "isArchived",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to true if the card has been\narchived",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 247,
            "itemtype": "method",
            "name": "getLastActivityDate",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the timestamp of the last\nactivity performed on the card",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 263,
            "itemtype": "method",
            "name": "getLabels",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the card's labels",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 278,
            "itemtype": "method",
            "name": "getList",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to list that the card belongs to.\nThis is a list object.",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 295,
            "itemtype": "method",
            "name": "getLongUrl",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to card's longform url",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 311,
            "itemtype": "method",
            "name": "getMembers",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the card's members. This is\nan array of member objects.",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 328,
            "itemtype": "method",
            "name": "getMembersVoted",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the members who have voted for\nthis card. This is an array of member objects.",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 344,
            "itemtype": "method",
            "name": "getName",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the card's name",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 359,
            "itemtype": "method",
            "name": "getPosition",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to card's position",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 374,
            "itemtype": "method",
            "name": "getShortId",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to shortform version of the\ncard's id",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 390,
            "itemtype": "method",
            "name": "getShortLink",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to shortform version of the\ncard's link",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 406,
            "itemtype": "method",
            "name": "getShortUrl",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to shortform version of the\ncard's url",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 422,
            "itemtype": "method",
            "name": "getStickers",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to objects representing the\ncard's stickers",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 442,
            "description": "Archives the card.",
            "itemtype": "method",
            "name": "archive",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 461,
            "description": "Unarchives the card.",
            "itemtype": "method",
            "name": "unarchive",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 480,
            "itemtype": "method",
            "name": "setDescription",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "description",
                    "description": "the new description",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 500,
            "itemtype": "method",
            "name": "setDueDate",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "dueDate",
                            "description": "the due date or null to remove the due date",
                            "type": "Date"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 520,
            "itemtype": "method",
            "name": "setCover",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "attachmentCoverId",
                            "description": "the id of the attachment to use\nas the card's cover",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 541,
            "description": "Removes the cover from the card.",
            "itemtype": "method",
            "name": "removeCover",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 560,
            "itemtype": "method",
            "name": "setBoard",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "boardId",
                            "description": "the board to move the card to",
                            "type": "String"
                        },
                        {
                            "name": "listId",
                            "description": "the list to move the card to. If this isn't\nincluded, then the card will be moved to the board's first list.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 584,
            "itemtype": "method",
            "name": "setList",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "listId",
                            "description": "the list to move the card to",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 604,
            "itemtype": "method",
            "name": "setMembers",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "memberIds",
                            "description": "a comma-separated list of member id's.\nThe card will have these members and no others.",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 625,
            "itemtype": "method",
            "name": "setLabels",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "colors",
                            "description": "a comma-separated list of colors, or 'all'\nfor all colors. The card will have these label colors and no others.",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 646,
            "itemtype": "method",
            "name": "setName",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "name",
                            "description": "the new name of the card",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 666,
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "position",
                            "description": "the new position of the card",
                            "type": "Number"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 686,
            "description": "Edits the sticker using the given values.",
            "itemtype": "method",
            "name": "updateSticker",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "stickerId",
                            "description": "the id of the sticker to edit",
                            "type": "String"
                        },
                        {
                            "name": "top",
                            "description": "the top coordinate of the sticker",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "left",
                            "description": "the left coordinate of the sticker",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "zIndex",
                            "description": "the z-index of the sticker",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "rotate",
                            "description": "the rotation value of the sticker",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 712,
            "description": "Subscribe the user to the card.",
            "itemtype": "method",
            "name": "subscribe",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 731,
            "description": "Unsubscribe the user from the card.",
            "itemtype": "method",
            "name": "unsubscribe",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 750,
            "itemtype": "method",
            "name": "addComment",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "comment",
                            "description": "the comment to add to the card",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to an action object representing\nthe new comment",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 774,
            "description": "Adds an attachment to the card. You can either add a file using form data\nor a url.",
            "itemtype": "method",
            "name": "addAttachment",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "file",
                            "description": "the file data to add",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "url",
                            "description": "the url of the file to add",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "name",
                            "description": "the name of the file",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "mimeType",
                            "description": "the mime type of the file. This is only used if\nparams.file is set.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 801,
            "itemtype": "method",
            "name": "convertChecklistItemToCard",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "checklistId",
                            "description": "the id of the checklist item's parent\nchecklist",
                            "type": "String"
                        },
                        {
                            "name": "checklistItemId",
                            "description": "the id of the checklist item",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a card object representing\nthen new card",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 831,
            "itemtype": "method",
            "name": "addChecklist",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "checklistId",
                            "description": "the id of the checklist to move to\nthe card. If this is null or not included, then a new checklist is\ncreated.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "name",
                            "description": "the name of the checklist",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "cloneId",
                            "description": "the id of the checklist to clone",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 862,
            "itemtype": "method",
            "name": "addLabelById",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "labelId",
                            "description": "the label to add to the card",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 882,
            "itemtype": "method",
            "name": "addLabelByColor",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "color",
                            "description": "the color of the label to add",
                            "type": "String"
                        },
                        {
                            "name": "name",
                            "description": "the name on the label. If the color and name\ncombination already exist on the board, then that label is used. If not, a\nnew label is created with the given color and name combination.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to the label object",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 909,
            "itemtype": "method",
            "name": "addMember",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "memberId",
                            "description": "the id of the member to add to the card",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 929,
            "description": "Mark all notifications related to the card as read.",
            "itemtype": "method",
            "name": "addmarkNotificationsRead",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 948,
            "itemtype": "method",
            "name": "setMemberVoteToYes",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "memberId",
                            "description": "the id of the member who will give a yes\nvote on the card",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 969,
            "itemtype": "method",
            "name": "addSticker",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "image",
                            "description": "the sticker image to add",
                            "type": "String"
                        },
                        {
                            "name": "top",
                            "description": "the top coordinate of the sticker",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "left",
                            "description": "the left coordinate of the sticker",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "zIndex",
                            "description": "the z-index of the sticker",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "rotate",
                            "description": "the rotation value of the sticker",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 997,
            "itemtype": "method",
            "name": "removeComment",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "actionId",
                            "description": "the id of the comment action to remove\nfrom the card",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 1016,
            "itemtype": "method",
            "name": "removeAttachment",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "attachmentId",
                            "description": "the id of the attachment to remove\nfrom the card",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 1035,
            "itemtype": "method",
            "name": "removeLabelId",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "labelId",
                            "description": "the id of the label to remove from the card",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 1053,
            "itemtype": "method",
            "name": "removeLabelByColor",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "color",
                            "description": "the name of the cold to remove from the card",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 1071,
            "itemtype": "method",
            "name": "removeMember",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "memberId",
                            "description": "the id of the member to remove from the\ncard",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 1090,
            "itemtype": "method",
            "name": "setMemberVoteToNo",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "memberId",
                            "description": "the id of the member who will have their\nvote rescinded",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\card.js",
            "line": 1109,
            "itemtype": "method",
            "name": "removeSticker",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "stickerId",
                            "description": "the id of the sticker to remove from the\ncard",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "card"
        },
        {
            "file": "lib\\obj\\checklist.js",
            "line": 39,
            "itemtype": "method",
            "name": "getBoard",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a board object representing\nthe checklist's board",
                "type": "Object"
            },
            "class": "checklist"
        },
        {
            "file": "lib\\obj\\checklist.js",
            "line": 54,
            "itemtype": "method",
            "name": "getCard",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a an array of card objects\nrepresenting the checklist's cards",
                "type": "Object"
            },
            "class": "checklist"
        },
        {
            "file": "lib\\obj\\checklist.js",
            "line": 69,
            "itemtype": "method",
            "name": "getCheckItems",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to an array of checklist items",
                "type": "Object"
            },
            "class": "checklist"
        },
        {
            "file": "lib\\obj\\checklist.js",
            "line": 83,
            "itemtype": "method",
            "name": "getName",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the name of the checklist",
                "type": "Object"
            },
            "class": "checklist"
        },
        {
            "file": "lib\\obj\\checklist.js",
            "line": 97,
            "itemtype": "method",
            "name": "getPosition",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the checklist's position",
                "type": "Object"
            },
            "class": "checklist"
        },
        {
            "file": "lib\\obj\\checklist.js",
            "line": 115,
            "itemtype": "method",
            "name": "setCard",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "cardId",
                            "description": "the id of the card to move the checklist to",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "checklist"
        },
        {
            "file": "lib\\obj\\checklist.js",
            "line": 135,
            "itemtype": "method",
            "name": "setName",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "name",
                            "description": "the name of the checklist",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "checklist"
        },
        {
            "file": "lib\\obj\\checklist.js",
            "line": 155,
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "position",
                            "description": "the checklist's position",
                            "type": "Number"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "checklist"
        },
        {
            "file": "lib\\obj\\checklist.js",
            "line": 175,
            "itemtype": "method",
            "name": "addCheckItem",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "name",
                            "description": "the name of the checklist item",
                            "type": "String"
                        },
                        {
                            "name": "position",
                            "description": "the position of the\nchecklist item. Valid values are 'top', 'bottom', or a positive number.",
                            "type": "String | Number",
                            "optional": true,
                            "optdefault": "'bottom'"
                        },
                        {
                            "name": "checked",
                            "description": "checked whether or not the\nchecklist item should be checked",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to the id of the new checklist\nitem",
                "type": "Object"
            },
            "class": "checklist"
        },
        {
            "file": "lib\\obj\\checklist.js",
            "line": 206,
            "itemtype": "method",
            "name": "removeChecklistItem",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "checklistItemId",
                            "description": "the id of the checklist item to\ndelete",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "checklist"
        },
        {
            "file": "lib\\obj\\label.js",
            "line": 38,
            "itemtype": "method",
            "name": "getBoard",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a board object representing\nthe label's board",
                "type": "Object"
            },
            "class": "label"
        },
        {
            "file": "lib\\obj\\label.js",
            "line": 53,
            "itemtype": "method",
            "name": "getColor",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to color of the label",
                "type": "Object"
            },
            "class": "label"
        },
        {
            "file": "lib\\obj\\label.js",
            "line": 67,
            "itemtype": "method",
            "name": "getName",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to name of the label",
                "type": "Object"
            },
            "class": "label"
        },
        {
            "file": "lib\\obj\\label.js",
            "line": 81,
            "itemtype": "method",
            "name": "getUses",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to number of times the label is\nused",
                "type": "Object"
            },
            "class": "label"
        },
        {
            "file": "lib\\obj\\label.js",
            "line": 102,
            "itemtype": "method",
            "name": "setColor",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "color",
                            "description": "the color of the label",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "label"
        },
        {
            "file": "lib\\obj\\label.js",
            "line": 122,
            "itemtype": "method",
            "name": "setName",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "name",
                            "description": "the name of the label",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "label"
        },
        {
            "file": "lib\\obj\\list.js",
            "line": 38,
            "itemtype": "method",
            "name": "getActions",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to an array of action objects\nrepresenting the list's actions",
                "type": "Object"
            },
            "class": "list"
        },
        {
            "file": "lib\\obj\\list.js",
            "line": 53,
            "itemtype": "method",
            "name": "getAmISubscribed",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to true if the user is subscribed\nto the list",
                "type": "Object"
            },
            "class": "list"
        },
        {
            "file": "lib\\obj\\list.js",
            "line": 69,
            "itemtype": "method",
            "name": "getBoard",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a board object representing\nthe list's board",
                "type": "Object"
            },
            "class": "list"
        },
        {
            "file": "lib\\obj\\list.js",
            "line": 84,
            "itemtype": "method",
            "name": "getCards",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to an array of cards objects\nrepresenting the list's cards",
                "type": "Object"
            },
            "class": "list"
        },
        {
            "file": "lib\\obj\\list.js",
            "line": 99,
            "itemtype": "method",
            "name": "isArchived",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to true if the list is archived",
                "type": "Object"
            },
            "class": "list"
        },
        {
            "file": "lib\\obj\\list.js",
            "line": 114,
            "itemtype": "method",
            "name": "getName",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the list's name",
                "type": "Object"
            },
            "class": "list"
        },
        {
            "file": "lib\\obj\\list.js",
            "line": 128,
            "itemtype": "method",
            "name": "getPosition",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the list's position",
                "type": "Object"
            },
            "class": "list"
        },
        {
            "file": "lib\\obj\\list.js",
            "line": 146,
            "description": "Archives the list.",
            "itemtype": "method",
            "name": "archive",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "list"
        },
        {
            "file": "lib\\obj\\list.js",
            "line": 165,
            "description": "Unarchives the list.",
            "itemtype": "method",
            "name": "unarchive",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "list"
        },
        {
            "file": "lib\\obj\\list.js",
            "line": 184,
            "description": "Archives all cards in the list.",
            "itemtype": "method",
            "name": "archiveAllCards",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "list"
        },
        {
            "file": "lib\\obj\\list.js",
            "line": 202,
            "description": "Moves all cards in the list to a new list.",
            "itemtype": "method",
            "name": "moveAllCards",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "boardId",
                            "description": "the id of the board to move the cards to",
                            "type": "String"
                        },
                        {
                            "name": "listId",
                            "description": "the id of the list to move the cards to",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "list"
        },
        {
            "file": "lib\\obj\\list.js",
            "line": 225,
            "itemtype": "method",
            "name": "setBoard",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "boardId",
                            "description": "the id of the board to move the list to",
                            "type": "String"
                        },
                        {
                            "name": "position",
                            "description": "the position to move the\nlist to. Valid values are 'top', 'bottom', or a positive number.",
                            "type": "String | Number",
                            "optional": true,
                            "optdefault": "'top'"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "list"
        },
        {
            "file": "lib\\obj\\list.js",
            "line": 247,
            "itemtype": "method",
            "name": "setName",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "name",
                            "description": "the name of the list",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "list"
        },
        {
            "file": "lib\\obj\\list.js",
            "line": 267,
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "position",
                            "description": "the position of the list on the board",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "list"
        },
        {
            "file": "lib\\obj\\list.js",
            "line": 287,
            "description": "Subscribes the user to the list.",
            "itemtype": "method",
            "name": "subscribe",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "list"
        },
        {
            "file": "lib\\obj\\list.js",
            "line": 306,
            "description": "Unsubscribes the user from the list.",
            "itemtype": "method",
            "name": "subscribe",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "list"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 39,
            "itemtype": "method",
            "name": "getActions",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the member's actions. This is an\narray of action objects.",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 55,
            "itemtype": "method",
            "name": "getAvatarHash",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the member's avatar hash",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 69,
            "itemtype": "method",
            "name": "getAvatarSource",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the source URL for the\nmember's avatar",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 84,
            "itemtype": "method",
            "name": "getBio",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to member's bio",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 98,
            "itemtype": "method",
            "name": "getBioData",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to an object containing the\nmember's bio data",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 113,
            "itemtype": "method",
            "name": "getBoardBackgrounds",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to all of the backgrounds the\nmember is eligible to use",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 128,
            "itemtype": "method",
            "name": "getBoards",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the member's boards. This is an\narray of board objects.",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 144,
            "itemtype": "method",
            "name": "getBoardsInvited",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the boards that the member is\ninvited to. This is an array of board objects.",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 159,
            "itemtype": "method",
            "name": "getBoardStars",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the member's board stars",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 173,
            "itemtype": "method",
            "name": "getCards",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the member's cards. This is an\narray of card objects.",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 189,
            "itemtype": "method",
            "name": "getConfirmed",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to true if the member's account\nhas been confirmed",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 204,
            "itemtype": "method",
            "name": "getCustomBoardBackgrounds",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the member's custom\nbackgrounds",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 220,
            "itemtype": "method",
            "name": "getCustomEmoji",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to member's custom emoji",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 234,
            "itemtype": "method",
            "name": "getCustomStickers",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the member's custom stickers",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 248,
            "itemtype": "method",
            "name": "getEmail",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the member's email address",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 262,
            "itemtype": "method",
            "name": "getFullName",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to member's full name",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 276,
            "itemtype": "method",
            "name": "getGravatarHash",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to member's Gravatar hash",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 290,
            "itemtype": "method",
            "name": "getPinnedBoards",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the id's of the boards that\nthe member has pinned.",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 305,
            "itemtype": "method",
            "name": "getInitials",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the member's initials",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 319,
            "itemtype": "method",
            "name": "getLoginTypes",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the member's login types",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 333,
            "itemtype": "method",
            "name": "getMemberType",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to member's type",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 347,
            "itemtype": "method",
            "name": "getNotifications",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to member's notifications. This\nis an array of notification objects.",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 362,
            "itemtype": "method",
            "name": "getOneTimeMessagesDismissed",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the types of messages that\nare dismissed for the member",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 377,
            "itemtype": "method",
            "name": "getOrganizations",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the organizations that the\nmember belongs to. This is an array of organization objects.",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 392,
            "itemtype": "method",
            "name": "getOrganizationsInvited",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the organizations that the\nmember is invited to. This is an array of organization objects.",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 407,
            "itemtype": "method",
            "name": "getPreferences",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the member's preferences",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 421,
            "itemtype": "method",
            "name": "getPremiumFeatures",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the premium features that the\nmember has available",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 436,
            "itemtype": "method",
            "name": "getProducts",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the member's products",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 451,
            "itemtype": "method",
            "name": "getSavedSearches",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the member's saved searches",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 465,
            "itemtype": "method",
            "name": "getStatus",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the member's activity status",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 479,
            "itemtype": "method",
            "name": "getTokens",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the member's active tokens",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 493,
            "itemtype": "method",
            "name": "getTrophies",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to member's trophies",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 507,
            "itemtype": "method",
            "name": "getUploadedAvatarHash",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the member's uploaded avatar\nhash",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 522,
            "itemtype": "method",
            "name": "getUrl",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the url of the member's\nprofile page",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 537,
            "itemtype": "method",
            "name": "getUsername",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the member's username",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 555,
            "itemtype": "method",
            "name": "setAvatarSource",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "source",
                            "description": "the source of the avatar. Valid values are\n'gravatar', 'upload', or 'none'.",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 576,
            "itemtype": "method",
            "name": "setBio",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "bio",
                            "description": "the member's bio",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 596,
            "itemtype": "method",
            "name": "updateBoardStar",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "boardStarId",
                            "description": "the board star to update",
                            "type": "String"
                        },
                        {
                            "name": "boardId",
                            "description": "the board id to move the board star to",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "position",
                            "description": "the position of the board star.\nValid values are 'top', 'bottom', or a positive number.",
                            "type": "String | Number",
                            "optional": true
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 619,
            "itemtype": "method",
            "name": "updateCustomBoardBackground",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "boardBackgroundId",
                            "description": "the board background id",
                            "type": "String"
                        },
                        {
                            "name": "tile",
                            "description": "whether or not to tile the background",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "brightness",
                            "description": "the brightness of the background.\nValid values are 'dark', 'light', or 'unknown'.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 642,
            "itemtype": "method",
            "name": "setFullName",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "fullName",
                            "description": "the member's full name",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 662,
            "itemtype": "method",
            "name": "setInitials",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "initials",
                            "description": "the member's initials. This must be a\nstring of length 1-4 that doesn't begin or end with a space.",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 683,
            "itemtype": "method",
            "name": "enableColorBlindMode",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 700,
            "itemtype": "method",
            "name": "disableColorBlindMode",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 717,
            "itemtype": "method",
            "name": "setLocale",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "locale",
                            "description": "the member's locale",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 737,
            "description": "Sets the member's preference for email summaries to hourly.",
            "itemtype": "method",
            "name": "setEmailSummariesHourly",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 756,
            "description": "Sets the member's preference for email summaries to immediately.",
            "itemtype": "method",
            "name": "setEmailSummariesInstantly",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 775,
            "description": "Turns off email summaries for member.",
            "itemtype": "method",
            "name": "setEmailSummariesNever",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 794,
            "itemtype": "method",
            "name": "updateSavedSearch",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "savedSearchId",
                            "description": "the saved search to update",
                            "type": "String"
                        },
                        {
                            "name": "name",
                            "description": "the name of the saved search",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "query",
                            "description": "the search query",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "the",
                    "description": "saved search's position. Valid values are\n'top', 'bottom', or a positive number.",
                    "type": "String | Number"
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 818,
            "itemtype": "method",
            "name": "setUsername",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "username",
                            "description": "the member's username. Must have a length\nof at least three characters. Only lowercase letters, underscores, and\nnumbers are allowed. Must be unique.",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 841,
            "itemtype": "method",
            "name": "addAvatar",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "file",
                            "description": "the avatar file",
                            "type": "File"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 861,
            "itemtype": "method",
            "name": "addBoardStar",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "boardId",
                            "description": "the id of the board that is getting the star",
                            "type": "String"
                        },
                        {
                            "name": "position",
                            "description": "the position of the board star.\nValid values are 'top', 'bottom', or a positive number.",
                            "type": "String | Number"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to the id of the new board star",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 886,
            "itemtype": "method",
            "name": "addCustomBoardBackground",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "file",
                            "description": "the image file",
                            "type": "File"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to the id of the new custom\nboard background",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 909,
            "itemtype": "method",
            "name": "addCustomEmoji",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "file",
                            "description": "the image file for the emoji",
                            "type": "File"
                        },
                        {
                            "name": "name",
                            "description": "the name of the emojy",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to the id of the new custom emoji",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 933,
            "itemtype": "method",
            "name": "addCustomSticker",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "file",
                            "description": "the image file for the sticker",
                            "type": "File"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to the id of the new custom\nsticker",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 957,
            "itemtype": "method",
            "name": "setOneTimeMessagesDismissed",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "messageType",
                            "description": "the type of message to dismiss",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 977,
            "itemtype": "method",
            "name": "addSavedSearch",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "name",
                            "description": "the name of the saved search",
                            "type": "String"
                        },
                        {
                            "name": "query",
                            "description": "the query to save",
                            "type": "String"
                        },
                        {
                            "name": "position",
                            "description": "the position of the search. Valid values\nare 'top', 'bottom', or a positive number.",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to the id of the new saved search",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 1007,
            "itemtype": "method",
            "name": "removeBoardStar",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "boardStarId",
                            "description": "the board star to remove",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 1025,
            "itemtype": "method",
            "name": "removeCustomBoardBackground",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "boardBackgroundId",
                            "description": "the id of the custom board\nbackground to remove",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 1044,
            "itemtype": "method",
            "name": "removeCustomSticker",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "customStickerId",
                            "description": "the id of the custom sticker to\nremove",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\member.js",
            "line": 1063,
            "itemtype": "method",
            "name": "removeSavedSearch",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "savedSearchId",
                            "description": "the id of the saved search to remove",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "member"
        },
        {
            "file": "lib\\obj\\notification.js",
            "line": 38,
            "itemtype": "method",
            "name": "getBoard",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a board object representing\nthe notification's board",
                "type": "Object"
            },
            "class": "notification"
        },
        {
            "file": "lib\\obj\\notification.js",
            "line": 53,
            "itemtype": "method",
            "name": "getCard",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a card object representing the\nnotification's card",
                "type": "Object"
            },
            "class": "notification"
        },
        {
            "file": "lib\\obj\\notification.js",
            "line": 68,
            "itemtype": "method",
            "name": "getData",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the notification's data",
                "type": "Object"
            },
            "class": "notification"
        },
        {
            "file": "lib\\obj\\notification.js",
            "line": 82,
            "itemtype": "method",
            "name": "getDate",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to notification's date",
                "type": "Object"
            },
            "class": "notification"
        },
        {
            "file": "lib\\obj\\notification.js",
            "line": 96,
            "itemtype": "method",
            "name": "getDisplay",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the notification's display",
                "type": "Object"
            },
            "class": "notification"
        },
        {
            "file": "lib\\obj\\notification.js",
            "line": 110,
            "itemtype": "method",
            "name": "getEntities",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the notification's entities",
                "type": "Object"
            },
            "class": "notification"
        },
        {
            "file": "lib\\obj\\notification.js",
            "line": 124,
            "itemtype": "method",
            "name": "getCreator",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a member object representing\nthe notification's creator",
                "type": "Object"
            },
            "class": "notification"
        },
        {
            "file": "lib\\obj\\notification.js",
            "line": 139,
            "itemtype": "method",
            "name": "getOrganizations",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to an organization object\nrepresenting the notification's organization",
                "type": "Object"
            },
            "class": "notification"
        },
        {
            "file": "lib\\obj\\notification.js",
            "line": 154,
            "itemtype": "method",
            "name": "getType",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the type of the notification",
                "type": "Object"
            },
            "class": "notification"
        },
        {
            "file": "lib\\obj\\notification.js",
            "line": 168,
            "itemtype": "method",
            "name": "isUnread",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to true if the notification is\nunread",
                "type": "Object"
            },
            "class": "notification"
        },
        {
            "file": "lib\\obj\\notification.js",
            "line": 187,
            "description": "Marks the notification as read.",
            "itemtype": "method",
            "name": "markAsRead",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "notification"
        },
        {
            "file": "lib\\obj\\notification.js",
            "line": 206,
            "description": "Marks the notification as unread.",
            "itemtype": "method",
            "name": "markAsRead",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "notification"
        },
        {
            "file": "lib\\obj\\objUtil.js",
            "line": 4,
            "description": "A utility for adapting trello object constructor parameters to a different\nobject type using a JSON response from the Trello API. This returns the\nfunction that will adapt the parameters.",
            "itemtype": "method",
            "name": "adaptConstructorParameters",
            "params": [
                {
                    "name": "response",
                    "description": "the stringified JSON returned by Trello",
                    "type": "String"
                },
                {
                    "name": "objType",
                    "description": "the object type to create",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the base constructor parameters that will be\nmodified to create the new Trello object",
                "type": "Function"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\organization.js",
            "line": 38,
            "itemtype": "method",
            "name": "getActions",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the organization's actions.\nThis is an array of action objects.",
                "type": "Object"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\organization.js",
            "line": 53,
            "itemtype": "method",
            "name": "getBillableMemberCount",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the number of billable members\nin the organization",
                "type": "Object"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\organization.js",
            "line": 68,
            "itemtype": "method",
            "name": "getBoards",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the organization's boards.\nThis is an array of board objects.",
                "type": "Object"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\organization.js",
            "line": 83,
            "itemtype": "method",
            "name": "getDescription",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the organization's description",
                "type": "Object"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\organization.js",
            "line": 97,
            "itemtype": "method",
            "name": "getDescriptionData",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the organization's description\ndata",
                "type": "Object"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\organization.js",
            "line": 112,
            "itemtype": "method",
            "name": "getDisplayName",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the organization's display name",
                "type": "Object"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\organization.js",
            "line": 126,
            "itemtype": "method",
            "name": "getLogoHash",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to organization's logo's hash",
                "type": "Object"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\organization.js",
            "line": 140,
            "itemtype": "method",
            "name": "getMembers",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the organization's members.\nThis is an array of member objects.",
                "type": "Object"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\organization.js",
            "line": 155,
            "itemtype": "method",
            "name": "getInvitedMembers",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the members that are invited\nto the organization. This is an array of member objects.",
                "type": "Object"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\organization.js",
            "line": 170,
            "itemtype": "method",
            "name": "getMemberships",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to organization's memberships",
                "type": "Object"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\organization.js",
            "line": 184,
            "itemtype": "method",
            "name": "getName",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the organization's name",
                "type": "Object"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\organization.js",
            "line": 198,
            "itemtype": "method",
            "name": "getPowerUps",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the organization's powerUps",
                "type": "Object"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\organization.js",
            "line": 212,
            "itemtype": "method",
            "name": "getPreferences",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the organization-wide\npreferences",
                "type": "Object"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\organization.js",
            "line": 227,
            "itemtype": "method",
            "name": "getPremiumFeatures",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the premium features accesible\nto the organization",
                "type": "Object"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\organization.js",
            "line": 242,
            "itemtype": "method",
            "name": "getProducts",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the organization's products",
                "type": "Object"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\organization.js",
            "line": 256,
            "itemtype": "method",
            "name": "getUrl",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the url for the organization's\nprofile",
                "type": "Object"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\organization.js",
            "line": 271,
            "itemtype": "method",
            "name": "getWebsite",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the organization's website",
                "type": "Object"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\organization.js",
            "line": 289,
            "itemtype": "method",
            "name": "setDescription",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "description",
                            "description": "the organization's description",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\organization.js",
            "line": 309,
            "itemtype": "method",
            "name": "setDisplayName",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "displayName",
                            "description": "the organization's display name",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\organization.js",
            "line": 329,
            "description": "Sets the member type for the given member. The member is added to the\norganization if they weren't already in it.",
            "itemtype": "method",
            "name": "setMemberType",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "memberId",
                            "description": "the id of the member to update",
                            "type": "String"
                        },
                        {
                            "name": "memberType",
                            "description": "the type of member to set. Valid values\nare 'admin', 'normal', or 'observer'.",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\organization.js",
            "line": 355,
            "itemtype": "method",
            "name": "addNonMember",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "email",
                            "description": "email address to invite",
                            "type": "String"
                        },
                        {
                            "name": "fullName",
                            "description": "full name of invitee",
                            "type": "String"
                        },
                        {
                            "name": "memberType",
                            "description": "member type to assign to the\nuser. Valid values are 'admin', 'normal', or 'observer'.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'normal'"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\organization.js",
            "line": 380,
            "description": "Activates the member within the organization.",
            "itemtype": "method",
            "name": "activateMember",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\organization.js",
            "line": 400,
            "description": "Deactivates the member within the organization.",
            "itemtype": "method",
            "name": "deactivate",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\organization.js",
            "line": 420,
            "itemtype": "method",
            "name": "setName",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "name",
                            "description": "the name of the organization. Must be at least\nthree characters long and contain only lowercase letters, numbers, and\nunderscores.",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\organization.js",
            "line": 442,
            "itemtype": "method",
            "name": "setAssociatedDomain",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "domain",
                            "description": "the Google Apps domain to link this\norganization to.",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\organization.js",
            "line": 463,
            "description": "Sets the visibility of organization-visibile boards owned by the\norganization.",
            "itemtype": "method",
            "name": "setOrgBoardVisibilityLevel",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "visibilityLevel",
                            "description": "the visibility level of the boards.\nValid values are 'admin', 'none', or 'org'.",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\organization.js",
            "line": 487,
            "description": "Sets the visibility of private-visibile boards owned by the organization.",
            "itemtype": "method",
            "name": "setPrivateBoardVisibilityLevel",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "visibilityLevel",
                            "description": "the visibility level of the boards.\nValid values are 'admin', 'none', or 'org'.",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\organization.js",
            "line": 510,
            "description": "Sets the visibility of public-visibile boards owned by the organization.",
            "itemtype": "method",
            "name": "setPublicBoardVisibilityLevel",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "visibilityLevel",
                            "description": "the visibility level of the boards.\nValid values are 'admin', 'none', or 'org'.",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\organization.js",
            "line": 533,
            "description": "Disables external members for the organization.",
            "itemtype": "method",
            "name": "disableExternalMembers",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\organization.js",
            "line": 552,
            "description": "Enables external members for the organization.",
            "itemtype": "method",
            "name": "enableExternalMembers",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\organization.js",
            "line": 571,
            "itemtype": "method",
            "name": "setGoogleAppsVersion",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "version",
                            "description": "the Google Apps version. Valid values are\n1 or 2.",
                            "type": "Number"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\organization.js",
            "line": 592,
            "itemtype": "method",
            "name": "setVisibilityLevel",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "visibilityLevel",
                            "description": "the visibility level of the\norganization. Valid values are 'private' or 'public'.",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\organization.js",
            "line": 613,
            "itemtype": "method",
            "name": "setWebsite",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "website",
                            "description": "the organization's website",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\organization.js",
            "line": 649,
            "itemtype": "method",
            "name": "removeLogo",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\organization.js",
            "line": 664,
            "itemtype": "method",
            "name": "removeMember",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "memberId",
                            "description": "the member to remove. This can also be\na username or organization name.",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\organization.js",
            "line": 683,
            "itemtype": "method",
            "name": "removeAssociatedDomain",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "organization"
        },
        {
            "file": "lib\\obj\\token.js",
            "line": 40,
            "itemtype": "method",
            "name": "getDateCreated",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the timestamp that the token\nwas created",
                "type": "Object"
            },
            "class": "token"
        },
        {
            "file": "lib\\obj\\token.js",
            "line": 55,
            "itemtype": "method",
            "name": "getDateExpires",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the timestamp that the token\nexpires",
                "type": "Object"
            },
            "class": "token"
        },
        {
            "file": "lib\\obj\\token.js",
            "line": 70,
            "itemtype": "method",
            "name": "getIdentifier",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the name of the app that\nrequested the token",
                "type": "Object"
            },
            "class": "token"
        },
        {
            "file": "lib\\obj\\token.js",
            "line": 85,
            "itemtype": "method",
            "name": "getMember",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the member that the token\nbelongs to. This is a member object.",
                "type": "Object"
            },
            "class": "token"
        },
        {
            "file": "lib\\obj\\token.js",
            "line": 100,
            "itemtype": "method",
            "name": "getPermissions",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the token's permissions",
                "type": "Object"
            },
            "class": "token"
        },
        {
            "file": "lib\\obj\\token.js",
            "line": 114,
            "itemtype": "method",
            "name": "getWebhooks",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the webhooks associated with\nthis token. This is an array of webhook objects.",
                "type": "Object"
            },
            "class": "token"
        },
        {
            "file": "lib\\obj\\token.js",
            "line": 133,
            "itemtype": "method",
            "name": "addWebhook",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "watchId",
                            "description": "the id of the model to watch",
                            "type": "String"
                        },
                        {
                            "name": "callbackUrl",
                            "description": "the url of the webhook's callback",
                            "type": "String"
                        },
                        {
                            "name": "description",
                            "description": "the description of the webhook",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to the new webhook object",
                "type": "Object"
            },
            "class": "token"
        },
        {
            "file": "lib\\obj\\token.js",
            "line": 163,
            "itemtype": "method",
            "name": "removeWebhook",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "webhookId",
                            "description": "the webhook to delete",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "token"
        },
        {
            "file": "lib\\obj\\webhook.js",
            "line": 38,
            "itemtype": "method",
            "name": "isActive",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to true if the webhook is active",
                "type": "Object"
            },
            "class": "webhook"
        },
        {
            "file": "lib\\obj\\webhook.js",
            "line": 52,
            "itemtype": "method",
            "name": "getCallbackUrl",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the webhook's callback URL",
                "type": "Object"
            },
            "class": "webhook"
        },
        {
            "file": "lib\\obj\\webhook.js",
            "line": 66,
            "itemtype": "method",
            "name": "getDescription",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the webhook's description",
                "type": "Object"
            },
            "class": "webhook"
        },
        {
            "file": "lib\\obj\\webhook.js",
            "line": 80,
            "itemtype": "method",
            "name": "getWatchId",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the id of the model that the\nwebhook is watching",
                "type": "Object"
            },
            "class": "webhook"
        },
        {
            "file": "lib\\obj\\webhook.js",
            "line": 99,
            "description": "Activates the webhook.",
            "itemtype": "method",
            "name": "activate",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "webhook"
        },
        {
            "file": "lib\\obj\\webhook.js",
            "line": 118,
            "description": "Deactivates the webhook.",
            "itemtype": "method",
            "name": "deactivate",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "webhook"
        },
        {
            "file": "lib\\obj\\webhook.js",
            "line": 137,
            "itemtype": "method",
            "name": "setCallbackUrl",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "callbackUrl",
                            "description": "the callback URL. Must be a valid URL\nthat is reachable with a HEAD request",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "webhook"
        },
        {
            "file": "lib\\obj\\webhook.js",
            "line": 158,
            "itemtype": "method",
            "name": "setDescription",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "description",
                            "description": "the webhook's description",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "webhook"
        },
        {
            "file": "lib\\obj\\webhook.js",
            "line": 178,
            "itemtype": "method",
            "name": "setWatchId",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "watchId",
                            "description": "the id of the model to watch",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "webhook"
        },
        {
            "file": "lib\\trello.js",
            "line": 37,
            "description": "Creates a new Trello object for the given type. If the object type is\ninvalid or if the object type does not allow creation through the API,\nthen this method resolves to an error.",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "objType",
                            "description": "the type of Trello object. Please refer to\nother documentation for the list of allowed types.",
                            "type": "String"
                        },
                        {
                            "name": "initialVals",
                            "description": "the initial values of the Trello\nobject",
                            "type": "Object"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete. This is optional, as a Promise is returned.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to the newly created trelloObj\nobject",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "trello",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trello.js",
            "line": 84,
            "description": "Retrieves an existing Trello object.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "objType",
                            "description": "the type of Trello object. Please refer to other\ndocumentation for the list of allowed types.",
                            "type": "String"
                        },
                        {
                            "name": "id",
                            "description": "the ID of the Trello object",
                            "type": "String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "the retrieved trelloObj object",
                "type": "Object"
            },
            "class": "trello",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trello.js",
            "line": 113,
            "itemtype": "method",
            "name": "createBoard",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "the board's name",
                            "type": "String"
                        },
                        {
                            "name": "description",
                            "description": "the board's description",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "organizationId",
                            "description": "the board's organization",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "cloneId",
                            "description": "the id of the existing board to clone",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "keepFromSource",
                            "description": "a comma-separated list of\nproperties to keep from the source board, or 'all'",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'all'"
                        },
                        {
                            "name": "powerUps",
                            "description": "the powerUps to give the new board. This\nis a comma separated list of values that can include 'calendar',\n'cardAging', 'recap', and 'voting'.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "permissionLevel",
                            "description": "the permissions level\nof the board. Valid values are 'org', 'private', and 'public'.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'default'"
                        },
                        {
                            "name": "voting",
                            "description": "the board permissions for\nvoting. Valid values are 'disabled', 'members', 'observers', 'org', and\n'public'.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'disabled'"
                        },
                        {
                            "name": "comments",
                            "description": "the board permissions for\ncommenting. Valid values are 'disabled', 'members', 'observers', 'org',\nand 'public'.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'members'"
                        },
                        {
                            "name": "invitations",
                            "description": "the board permissions for\nsending invitations. Valid values are 'admins' and 'members'.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'members'"
                        },
                        {
                            "name": "selfJoin",
                            "description": "the board permissions for allowing\nmembers to self join",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "cardCovers",
                            "description": "the board setting for card\ncovers.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "background",
                            "description": "the board's background",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'blue'"
                        },
                        {
                            "name": "cardAging",
                            "description": "the board's card aging\nsetting. Valid values are 'regular' and 'pirate'.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'regular'"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete. This is optional, as a Promise is returned.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to the new board",
                "type": "Object"
            },
            "class": "trello",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trello.js",
            "line": 173,
            "itemtype": "method",
            "name": "createCard",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "the card's name",
                            "type": "String"
                        },
                        {
                            "name": "listId",
                            "description": "the id of the list the card will be added to",
                            "type": "String"
                        },
                        {
                            "name": "description",
                            "description": "the card's description",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "position",
                            "description": "the card's position.\nThis can be 'top', 'bottom', or a positive number.",
                            "type": "String | Number",
                            "optional": true,
                            "optdefault": "'bottom'"
                        },
                        {
                            "name": "dueDate",
                            "description": "the card's due date. If not included, it won't\nhave a due date.",
                            "type": "Date",
                            "optional": true
                        },
                        {
                            "name": "labels",
                            "description": "a comma-separated list of colors, or 'all'",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "memberIds",
                            "description": "a comma-separated list of member id's\nthat will be assigned to the card",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "labelIds",
                            "description": "a comma-separated list of label id's\nthat will be assigned to the card",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "urlSource",
                            "description": "if included, a URL starting with\nhttp:// or https://",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "fileSource",
                            "description": "a file",
                            "type": "File",
                            "optional": true
                        },
                        {
                            "name": "sourceCardId",
                            "description": "the id of the card to clone",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "keepFromSource",
                            "description": "a comma-separated list of\nproperties to keep from the source card, or 'all'",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'all'"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete. This is optional, as a Promise is returned.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to the new card",
                "type": "Object"
            },
            "class": "trello",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trello.js",
            "line": 223,
            "itemtype": "method",
            "name": "createChecklist",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "the checklist's name",
                            "type": "String"
                        },
                        {
                            "name": "boardId",
                            "description": "the id of the checklist's board",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "cardId",
                            "description": "the id of the checklist's card",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "position",
                            "description": "the checklist's\nposition. Valid values are 'top', 'bottom', or a positive number.",
                            "type": "String | Number",
                            "optional": true,
                            "optdefault": "'bottom'"
                        },
                        {
                            "name": "cloneId",
                            "description": "the id of a checklist to clone",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete. This is optional, as a Promise is returned.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to the new checklist",
                "type": "Object"
            },
            "class": "trello",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trello.js",
            "line": 254,
            "itemtype": "method",
            "name": "createLabel",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "the label's name",
                            "type": "String"
                        },
                        {
                            "name": "color",
                            "description": "the label's color",
                            "type": "String"
                        },
                        {
                            "name": "boardId",
                            "description": "the id of the label's board",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete. This is optional, as a Promise is returned.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to the new label",
                "type": "Object"
            },
            "class": "trello",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trello.js",
            "line": 280,
            "itemtype": "method",
            "name": "createList",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "the list's name",
                            "type": "String"
                        },
                        {
                            "name": "boardId",
                            "description": "the id of the list's board",
                            "type": "String"
                        },
                        {
                            "name": "cloneId",
                            "description": "the id of the list to clone",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "position",
                            "description": "the position of the list.\nValid values are 'top', 'bottom', or a positive number.",
                            "type": "String | Number",
                            "optional": true,
                            "optdefault": "'top'"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete. This is optional, as a Promise is returned.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to the new list",
                "type": "Object"
            },
            "class": "trello",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trello.js",
            "line": 309,
            "itemtype": "method",
            "name": "createOrganization",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "the organization's name",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "displayName",
                            "description": "the organization's display name",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "description",
                            "description": "the organization's description",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "website",
                            "description": "the organization's website. Must be a\nvalid URL starting with 'http://', 'https://', or null.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to the new organization",
                "type": "Object"
            },
            "class": "trello",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trello.js",
            "line": 336,
            "itemtype": "method",
            "name": "createWebhook",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "props": [
                        {
                            "name": "watchId",
                            "description": "the id of the model to watch",
                            "type": "String"
                        },
                        {
                            "name": "callbackUrl",
                            "description": "the url of the webhook's callback",
                            "type": "String"
                        },
                        {
                            "name": "description",
                            "description": "the description of the webhook",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to the new webhook object",
                "type": "Object"
            },
            "class": "trello",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trello.js",
            "line": 362,
            "itemtype": "method",
            "name": "getAction",
            "params": [
                {
                    "name": "actionId",
                    "description": "the id of the action",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the action object",
                "type": "Object"
            },
            "class": "trello",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trello.js",
            "line": 371,
            "itemtype": "method",
            "name": "getBoard",
            "params": [
                {
                    "name": "boardId",
                    "description": "the id of the board",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the board object",
                "type": "Object"
            },
            "class": "trello",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trello.js",
            "line": 380,
            "itemtype": "method",
            "name": "getCard",
            "params": [
                {
                    "name": "cardId",
                    "description": "the id of the card",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the card object",
                "type": "Object"
            },
            "class": "trello",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trello.js",
            "line": 389,
            "itemtype": "method",
            "name": "getChecklist",
            "params": [
                {
                    "name": "checklistId",
                    "description": "the id of the checklist",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the checklist object",
                "type": "Object"
            },
            "class": "trello",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trello.js",
            "line": 398,
            "itemtype": "method",
            "name": "getLabel",
            "params": [
                {
                    "name": "labelId",
                    "description": "the id of the label",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the label object",
                "type": "Object"
            },
            "class": "trello",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trello.js",
            "line": 407,
            "itemtype": "method",
            "name": "getList",
            "params": [
                {
                    "name": "listId",
                    "description": "the id of the list",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the list object",
                "type": "Object"
            },
            "class": "trello",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trello.js",
            "line": 416,
            "itemtype": "method",
            "name": "getMember",
            "params": [
                {
                    "name": "memberId",
                    "description": "the id of the member",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the member object",
                "type": "Object"
            },
            "class": "trello",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trello.js",
            "line": 425,
            "itemtype": "method",
            "name": "getNotification",
            "params": [
                {
                    "name": "notificationId",
                    "description": "the id of the notification",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the notification object",
                "type": "Object"
            },
            "class": "trello",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trello.js",
            "line": 434,
            "itemtype": "method",
            "name": "getOrganization",
            "params": [
                {
                    "name": "organizationId",
                    "description": "the id of the organization",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the organization object",
                "type": "Object"
            },
            "class": "trello",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trello.js",
            "line": 443,
            "itemtype": "method",
            "name": "getToken",
            "params": [
                {
                    "name": "tokenId",
                    "description": "the id of the token",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the token object",
                "type": "Object"
            },
            "class": "trello",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trello.js",
            "line": 452,
            "itemtype": "method",
            "name": "getWebhook",
            "params": [
                {
                    "name": "webhookId",
                    "description": "the id of the webhook",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the webhook object",
                "type": "Object"
            },
            "class": "trello",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trello.js",
            "line": 461,
            "itemtype": "method",
            "name": "getCurrentUser",
            "return": {
                "description": "the member object for the current user",
                "type": "Object"
            },
            "class": "trello",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trello.js",
            "line": 469,
            "description": "Marks all notifications read by the user.",
            "itemtype": "method",
            "name": "markAllNotificationsRead",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the\noperation is complete",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value if successful",
                "type": "Object"
            },
            "class": "trello",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trello.js",
            "line": 481,
            "description": "Runs a query against the Trello search engine.",
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "query",
                            "description": "the search query to run",
                            "type": "String"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete. This is optional, as a Promise is returned.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "the query result",
                "type": "Object"
            },
            "class": "trello",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trelloObj.js",
            "line": 44,
            "description": "Pointer to the mapping entity for this Trello object type. This mapping\ncontains all allowable property names and operations for this object type.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "trelloPropertyNames",
            "type": "Object",
            "final": 1,
            "class": "trelloObj",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trelloObj.js",
            "line": 59,
            "description": "Stores all of the object's Trello properties internally.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "trelloProps",
            "type": "Object",
            "class": "trelloObj",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trelloObj.js",
            "line": 74,
            "description": "Expires local data. The next time a get() operation is called, new data\nwill be retrieved over the network.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "expireData",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "trelloObj",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trelloObj.js",
            "line": 86,
            "description": "Retrieves all of the auto-properties for the Trello object. auto-properties\nare properties that can be retrieved as part of the GET operation on the\nobject itself, and are not themselves Trello objects.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getAutoProperties",
            "return": {
                "description": "a Promise that resolves to an object containing all of the\nauto-properties and their values.",
                "type": "Object"
            },
            "class": "trelloObj",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trelloObj.js",
            "line": 106,
            "description": "Retrieves a Trello property on this object that is itselfg a Trello object.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getSubTypeProperty",
            "params": [
                {
                    "name": "prop",
                    "description": "the property to retrieve",
                    "type": "String"
                },
                {
                    "name": "propData",
                    "description": "the property mappings for this Trello object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a Promise that resolves to either a trelloObj object or\nan array of trelloObj objects",
                "type": "Object"
            },
            "class": "trelloObj",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trelloObj.js",
            "line": 151,
            "description": "Retrieves a property from the network.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getUnretrievedProperty",
            "params": [
                {
                    "name": "prop",
                    "description": "the property to retrieve",
                    "type": "String"
                },
                {
                    "name": "skipValidation",
                    "description": "if true, skips local\nvalidation of the property path",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "a Promise that resolves to the retrieved property."
            },
            "class": "trelloObj",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trelloObj.js",
            "line": 213,
            "description": "Sets properties on the object with the given values.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "values",
                    "description": "the values to set on the object. This object is\na mapping of properties supported by the Trello API and their new values.",
                    "type": "Object"
                },
                {
                    "name": "skipValidation",
                    "description": "if true, skips local\nvalidation of the property path",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value",
                "type": "Object"
            },
            "class": "trelloObj",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trelloObj.js",
            "line": 238,
            "description": "Sets values on a property of the Trello object. Skips local path\nvalidation.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "setPropertySkipValidation",
            "params": [
                {
                    "name": "values",
                    "description": "the new values",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "the path to the property",
                    "type": "String"
                },
                {
                    "name": "params.preferNonIdempotence",
                    "description": "only relevant if\nthe property can be set in both an idempotent and non-idempotent manner.\nIf this value is set to true, then the non-idempotent operation will be\nused. Otherwise, the operation will be idempotent.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value",
                "type": "Object"
            },
            "class": "trelloObj",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trelloObj.js",
            "line": 267,
            "description": "Sets values on a property of the Trello object.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "setProperty",
            "params": [
                {
                    "name": "values",
                    "description": "the new values",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "the path to the property. This is a series\nof property names and identifiers split by forward slashes (/). If\nskipValidation is false, this path must match a mapping in the Trello\nobject property maps, otherwise this method will resolve to an error.",
                    "type": "String"
                },
                {
                    "name": "params.preferNonIdempotence",
                    "description": "only relevant if\nthe property can be set in both an idempotent and non-idempotent manner.\nIf this value is set to true, then the non-idempotent operation will be\nused. Otherwise, the operation will be idempotent.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "skipValidation",
                    "description": "if true, skips local\nvalidation of the property path",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value",
                "type": "Object"
            },
            "class": "trelloObj",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trelloObj.js",
            "line": 341,
            "description": "Deletes the Trello object.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "deleteObj",
            "params": [
                {
                    "name": "skipValidation",
                    "description": "if true, skips local validation of\nthe property path",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value",
                "type": "Object"
            },
            "class": "trelloObj",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trelloObj.js",
            "line": 360,
            "description": "Deletes a property on the Trello object. Skips local path validation.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "deleteProperty",
            "params": [
                {
                    "name": "path",
                    "description": "the path to the property",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value",
                "type": "Object"
            },
            "class": "trelloObj",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trelloObj.js",
            "line": 376,
            "description": "Deletes a property on the Trello object.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "deleteProperty",
            "params": [
                {
                    "name": "path",
                    "description": "the path to the property. This is a series\nof property names and identifiers split by forward slashes (/). If\nskipValidation is false, this path must match a mapping in the Trello\nobject property maps, otherwise this method will resolve to an error.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value",
                "type": "Object"
            },
            "class": "trelloObj",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trelloObj.js",
            "line": 419,
            "description": "Asynchronously retrieves a property value from Trello. If the property\nhasn't yet been populated, or it is dirty, then a network call to Trello\nis made. Otherwise, the property is returned from memory. An error will\nbe returned if the property doesn't exist or is not a gettable property.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "params.propName",
                    "description": "the name of the property to retrieve",
                    "type": "String"
                },
                {
                    "name": "params.skipValidation",
                    "description": "if true, skips local\nvalidation of the property path",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "params.callback",
                    "description": "the callback function once the\noperation is complete. This is optional, as a Promise is returned.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the property value",
                "type": "Object"
            },
            "class": "trelloObj",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trelloObj.js",
            "line": 444,
            "description": "Gets the id of the Trello object.",
            "itemtype": "method",
            "name": "getId",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function once the operation is\ncomplete. This is optional, as a Promise is returned.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "a Promise that resolves to the id",
                "type": "Object"
            },
            "class": "trelloObj",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trelloObj.js",
            "line": 461,
            "description": "Sets the given property using the new values passed in. If a property name\nis not included, then the object itself is set using the new values.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "params",
                    "description": "the parameters object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "values",
                            "description": "the new values",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "{}"
                        },
                        {
                            "name": "propName",
                            "description": "the name of the property you are setting.\nIf propName isn't included, then params.values is set on the object itself.",
                            "type": "String"
                        },
                        {
                            "name": "preferNonIdempotence",
                            "description": "only relevant when\nthe given property name can be modified both in an idempotent and a\nnon-idempotent way. In that case, we default to the idempotent operation.\nAs an example, if you set the labels on a card in an idempotent way, then\nit will replace all of the existing labels with the labels that were\npassed in. If you do it in a non-idempotent way, then the passed in labels\nwill be added to the card, but existing labels will not be modified.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "skipValidation",
                            "description": "if true, skips local\nvalidation of the property path",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete. This is optional, as a Promise is returned.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value. The exact\nnature of this value is currently undefined and may change in the future.",
                "type": "Object"
            },
            "class": "trelloObj",
            "module": "trello-yello"
        },
        {
            "file": "lib\\trelloObj.js",
            "line": 507,
            "description": "Deletes the given property. If no property is given, then the Trello\nobject itself gets deleted.",
            "itemtype": "method",
            "name": "del",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "propName",
                            "description": "the property to delete. If this is not\nincluded, then the object itself will be deleted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "callback",
                            "description": "the callback function once the\noperation is complete. This is optional, as a Promise is returned.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "skipValidation",
                            "description": "if true, skips local\nvalidation of the property path",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "a Promise that resolves to a truthy value. The exact\nnature of this value is currently undefined and may change in the future",
                "type": "Object"
            },
            "class": "trelloObj",
            "module": "trello-yello"
        },
        {
            "file": "lib\\util.js",
            "line": 6,
            "description": "A recursive function that checks that a property path that is formatted\nas a string with its properties separated by forward slashes ('/') matches\na legal property path as listed within our object maps. The rules are as\nfollows:\n1. If we are on the last property in the path, then its allowEmpty field\nmust be set to true.\n2. If the next element in the path matches a subproperty of the current\nproperty, then we have the following cases:\n2(a). If the property does not have an array named allowNext or that array\ndoes not include the next element, then return false.\n2(b). If allowNext does include the next element, recursively call this\nfunction on that property.\n3. If the next element in the path does not match a subproperty, then\ncheck the property's allowId array. If that array exists, then we have\nthe following cases:\n3(a). If the next element is the last element in the path, then allowId\nmust contain the empty string, which signifies that the id can be the last\nelement in the path.\n3(b). If the next element is not the last element in the path, then\nallowId must contain a string that equals the second element in the path.\nIf so, and if a subproperty exists with the name of that second element,\nthen recursively call this function with that subproperty.\n3(c). If neither of the above cases are met, return false.",
            "itemtype": "method",
            "name": "hasValidPath",
            "params": [
                {
                    "name": "property",
                    "description": "the property mappings with the current property\nas the root object",
                    "type": "Object"
                },
                {
                    "name": "remainingPath",
                    "description": "the remaining path. The first element\nis the immediate child of the property parameter. If remainingPath is\nempty, then property is the last element of the path and its validation as\nsuch is returned.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the path is valid for the property tree",
                "type": "Boolean"
            },
            "static": 1,
            "class": "",
            "module": "trello-yello"
        },
        {
            "file": "lib\\util.js",
            "line": 73,
            "description": "Removes properties from the base object that don't map to\nTrello objects for the given object type. This is useful so\nthat we can copy raw data to an object without worrying\nabout failing to create the proper Trello objects.\nA possible future improvement is to instantiate the correct Trello\nobject for each of these, instead of simply removing them.",
            "itemtype": "method",
            "name": "removeNonAutoProperties",
            "params": [
                {
                    "name": "baseObj",
                    "description": "the object to remove non-auto properties from",
                    "type": "Object"
                },
                {
                    "name": "maps",
                    "description": "the Trello object property maps. Please refer to its\ndocumentation for details.",
                    "type": "Object"
                }
            ],
            "static": 1,
            "class": "",
            "module": "trello-yello"
        },
        {
            "file": "net\\networkService.js",
            "line": 11,
            "description": "Returns an error message appropriate to the given HTTP verb.",
            "itemtype": "method",
            "name": "getErrorMessageForVerb",
            "params": [
                {
                    "name": "verb",
                    "description": "the verb for which to get an error message",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the error message",
                "type": "String"
            },
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "",
            "module": "trello-yello"
        },
        {
            "file": "net\\networkService.js",
            "line": 28,
            "description": "Makes an HTTP request to the Trello API.",
            "itemtype": "method",
            "name": "send",
            "params": [
                {
                    "name": "params",
                    "description": "the method parameters object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "verb",
                            "description": "the HTTP verb to use",
                            "type": "String"
                        },
                        {
                            "name": "config",
                            "description": "the configuration information for the Trello api",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "key",
                                    "description": "the application key for accessing Trello",
                                    "type": "String"
                                },
                                {
                                    "name": "token",
                                    "description": "a valid Trello API token",
                                    "type": "String"
                                },
                                {
                                    "name": "version",
                                    "description": "the Trello API version Number",
                                    "type": "Number"
                                }
                            ]
                        },
                        {
                            "name": "objType",
                            "description": "the type of Trello object. Please refer to\nother documentation for the list of allowed types.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "id",
                    "description": "the id of the Trello object. Not required for creating\nnew objects",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "urlData",
                    "description": "information to be passed in the query string. for\neach property on the object, it will take the form key=value, where key\nis the property name and value is its value",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "bodyData",
                    "description": "the data to be included as the body of\nthe HTTP request",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "prop",
                    "description": "used if the request will be upon a property of the\nobject. This is appended to the query url according to the Trello API spec.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "a promise that resolves to the data returned by Trello"
            },
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "",
            "module": "trello-yello"
        },
        {
            "file": "net\\networkService.js",
            "line": 143,
            "description": "Calls DELETE on the Trello API.",
            "itemtype": "method",
            "name": "delete",
            "params": [
                {
                    "name": "config",
                    "description": "the configuration information for the Trello api",
                    "type": "Object",
                    "props": [
                        {
                            "name": "key",
                            "description": "the application key for accessing Trello",
                            "type": "String"
                        },
                        {
                            "name": "token",
                            "description": "a valid Trello API token",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "objType",
                    "description": "the type of Trello object. Please refer to\nother documentation for the list of allowed types.",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "the id of the Trello object.",
                    "type": "String"
                },
                {
                    "name": "prop",
                    "description": "the path of the property to be deleted. If not\nincluded, then the delete will be on the object itself.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "a promise that resolves to the data returned by Trello"
            },
            "static": 1,
            "class": "",
            "module": "trello-yello"
        },
        {
            "file": "net\\networkService.js",
            "line": 172,
            "description": "Calls GET on the Trello API.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "config",
                    "description": "the configuration information for the Trello api",
                    "type": "Object",
                    "props": [
                        {
                            "name": "key",
                            "description": "the application key for accessing Trello",
                            "type": "String"
                        },
                        {
                            "name": "token",
                            "description": "a valid Trello API token",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "objType",
                    "description": "the type of Trello object. Please refer to\nother documentation for the list of allowed types.",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "the id of the Trello object.",
                    "type": "String"
                },
                {
                    "name": "parameters",
                    "description": "additional query string parameters",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "prop",
                    "description": "the path of the property to be retrieved. If not\nincluded, then the base obect itself will be retrieved.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "a promise that resolves to the data returned by Trello"
            },
            "static": 1,
            "class": "",
            "module": "trello-yello"
        },
        {
            "file": "net\\networkService.js",
            "line": 199,
            "description": "Calls POST on the Trello API.",
            "itemtype": "method",
            "name": "post",
            "params": [
                {
                    "name": "config",
                    "description": "the configuration information for the Trello api",
                    "type": "Object",
                    "props": [
                        {
                            "name": "key",
                            "description": "the application key for accessing Trello",
                            "type": "String"
                        },
                        {
                            "name": "token",
                            "description": "a valid Trello API token",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "objType",
                    "description": "the type of Trello object. Please refer to\nother documentation for the list of allowed types.",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "the id of the Trello object. If this is not included,\nthen this operation will create a new Trello object.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "newVals",
                    "description": "the values to set. This will be the HTTP request\nbody.",
                    "type": "Object"
                },
                {
                    "name": "prop",
                    "description": "the path of the property to be set. If not\nincluded, then the base obect itself will have its values set.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "a promise that resolves to the data returned by Trello"
            },
            "static": 1,
            "class": "",
            "module": "trello-yello"
        },
        {
            "file": "net\\networkService.js",
            "line": 232,
            "description": "Calls PUT on the Trello API.",
            "itemtype": "method",
            "name": "put",
            "params": [
                {
                    "name": "config",
                    "description": "the configuration information for the Trello api",
                    "type": "Object",
                    "props": [
                        {
                            "name": "key",
                            "description": "the application key for accessing Trello",
                            "type": "String"
                        },
                        {
                            "name": "token",
                            "description": "a valid Trello API token",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "objType",
                    "description": "the type of Trello object. Please refer to\nother documentation for the list of allowed types.",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "the id of the Trello object.",
                    "type": "String"
                },
                {
                    "name": "newVals",
                    "description": "the values to set. This will be the HTTP request\nbody.",
                    "type": "Object"
                },
                {
                    "name": "prop",
                    "description": "the path of the property to be set. If not\nincluded, then the base obect itself will have its values set.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "a promise that resolves to the data returned by Trello"
            },
            "static": 1,
            "class": "",
            "module": "trello-yello"
        }
    ],
    "warnings": []
}